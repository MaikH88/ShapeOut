# Changes in online interface:
# - Set build schedule to "0 3 * * *" for nightly builds.
#skip_commits:
#  # Do not build on commits. Only nightly builds (web interface)
#  author: /.*/


# Do not use shallow_clone, because we get the program version from the git tags
#shallow_clone: true
clone_depth: 100


# Only build master branch
## seems to prevent building tags
#branches:
#  only:
#  - master
notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false

environment:
  COVERALLS_REPO_TOKEN:
    secure: 2bt2CXJJ5FWcDCh1rvnlg7hG+rPqIvfovk5s9OKWdwkJUaSyxpMrp//UJra1nkZ4
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    WITH_COMPILER: "cmd /E:ON /V:ON /C .\\freeze_appveyor\\run_with_compiler.cmd"

  # https://github.com/appveyor/ci/issues/359
  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Miniconda-x64"
#      PYTHON_VERSION: "2.7"
#      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

install:
  - dir
  - cd
  - git describe --tags HEAD
  # Install InnoSetup and add to path
  # Copied from
  # https://github.com/Phonations/Joker/blob/master/appveyor.yml
  - choco install -y InnoSetup
  - choco install -y wget
  # install R with lme4
  - wget -q http://cran.at.r-project.org/bin/windows/base/old/3.2.2/R-3.2.2-win.exe
  - R-3.2.2-win.exe /silent
  # Installing an older version of R di neither work so:
  #- choco install -dfvy -version 3.2.2 -source 'http://cran.at.r-project.org/bin/windows/base/old/3.2.2/;http://cran.at.r-project.org/bin/windows/base/old/;c:\projects\shapeout' r.project
  # nor so:
  #- choco install -y -version 3.2.2 r.project
  - set PATH=%PATH%;"C:\\Program Files\\R\\R-3.2.2\\bin\\i386"
  - R -e "install.packages('lme4', repos='http://cran.r-project.org')"
  # Use appveyor miniconda
  # Determine platform
  - '%PYTHON%/python -c "import platform; print platform.uname()"'
  - '%PYTHON%/python -c "import sys; print sys.maxint"'
  - '%PYTHON%/python -c "import sys; print sys.version"'

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "set PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"

  # Install package-specific libraries
  # CONDA installs
  # Pinned versions are defined in freeze_appveyor\pinned
  - xcopy freeze_appveyor\pinned %PYTHON%\conda-meta\ /Y
  #- "conda update -f conda"
  # Anaconda client for searching packages?
  #- "conda install anaconda-client"
  - "conda install --yes --quiet -c https://conda.binstar.org/menpo chaco cffi enable kiwisolver numpy opencv pillow pip pyqt pyface requests scipy statsmodels wxpython"
  # workaround for build failures, see
  # https://ci.appveyor.com/project/paulmueller/shapeout/build/1.0.152#L504
  - "pip freeze"
  # PIP installs
  - "pip install nptdms"
  # install pyper (R)
  - "pip install pyper"
  - "pip install reportlab"
  - "pip install simplejson"
  # build dependencies
  #- "pip install wheel"
  # dclab
  # prevent pip from installing later scipy versions using "--no-deps"
  # requirements from dclab were partly installed with conda:
  #- "pip install dclab --no-deps"
  - "pip install git+git://github.com/ZELLMECHANIK-DRESDEN/dclab.git --no-deps"
 
  # Patch libraries
  - '%WITH_COMPILER% %PYTHON%/python freeze_appveyor/patch_libraries.py'
  
  # Install pyinstaller (includes dependency for pywin32)
  - "%WITH_COMPILER% pip install pypiwin32"
  - "%WITH_COMPILER% pip install git+git://github.com/pyinstaller/pyinstaller.git@779d07b236a943a4bf9d2b1a0ae3e0ebcc914798"

  # Run develop (installs yet missing packages and runs cython)
  #- "%WITH_COMPILER% %PYTHON%/python setup.py develop"

  # Show the installed packages
  - "pip freeze"

build: off

test_script:
  - 'python -c "import shapeout; print shapeout.__version__"'
  - "pip install coverage"
  - "pip install coveralls"
  - "coverage run --source=shapeout ./setup.py test && exit 0" #ignore any errors here
  - "coverage report -m"
  - "coveralls --verbose"

after_test:
  # If tests are successful, create a whl package for the project.
  #- "%WITH_COMPILER% %PYTHON%/python setup.py bdist_wheel"
  #- ps: "ls dist"
  # Run pyinstaller
  # This will create the "win7_innosetup.iss" file
  - "%WITH_COMPILER% pyinstaller -y --log-level=WARN freeze_appveyor\\win_shapeout.spec"
  # Create InnoSetup installers
  # Set InnoSetup path here, because Cython complained about it.
  - set PATH=%PATH%;"C:\\Program Files (x86)\\Inno Setup 5"
  - iscc /VERYSILENT win_shapeout.iss

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  #- path: dist\*
  # InnoSetup files
  - path: Output\*

deploy:
  provider: GitHub
  auth_token:
    secure: /b5SfmYssAfLaWi0qkPhxR5CruSVBZUurSQLEL3RAaRlHn6HTPrkIqvrLDk/8JxB
  artifact: /.*\.exe/
  draft: true
  prerelease: true
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
